import { jsx as r, jsxs as x } from "react/jsx-runtime";
import c from "styled-components";
import { useControllableState as T } from "../hooks/useControllableState.js";
import { useId as I } from "../hooks/useId.js";
import { Flex as d } from "../Flex/Flex.js";
import { inputFocusStyle as $ } from "../themes/utils.js";
import { TextButton as F } from "../TextButton/TextButton.js";
import { Field as B } from "../Field/Field.js";
import { FieldLabel as W } from "../Field/FieldLabel.js";
import { FieldHint as v } from "../Field/FieldHint.js";
import { FieldError as R } from "../Field/FieldError.js";
import { useField as S } from "../Field/FieldContext.js";
import { Typography as y } from "../Typography/Typography.js";
const j = ({ offLabel: n, onLabel: h, disabled: e, checked: a, onChange: s, size: l = "M", ...m }) => {
  const [t = !1, p] = T({
    prop: a
  }), { error: u, id: o, name: g, required: f } = S(), i = t !== null && !t, w = `${o}-hint`, b = `${o}-error`;
  return x(q, { position: "relative", hasRadius: !0, padding: 1, background: e ? "neutral150" : "neutral100", borderStyle: "solid", borderWidth: "1px", borderColor: "neutral200", wrap: "wrap", cursor: e ? "not-allowed" : "pointer", hasError: !!u, children: [r(C, { hasRadius: !0, flex: "1 1 50%", paddingTop: 2, paddingBottom: 2, paddingLeft: 3, paddingRight: 3, justifyContent: "center", background: e && i ? "neutral200" : i ? "neutral0" : "transparent", borderColor: e && i ? "neutral300" : i ? "neutral200" : e ? "neutral150" : "neutral100", size: l, children: r(y, { variant: "pi", fontWeight: "bold", textTransform: "uppercase", textColor: e ? "neutral700" : i ? "danger700" : "neutral600", children: n }) }), r(C, { hasRadius: !0, flex: "1 1 50%", paddingLeft: 3, paddingRight: 3, justifyContent: "center", background: e && t ? "neutral200" : t ? "neutral0" : "transparent", borderColor: e && t ? "neutral300" : t ? "neutral200" : e ? "neutral150" : "neutral100", size: l, children: r(y, { variant: "pi", fontWeight: "bold", textTransform: "uppercase", textColor: e ? "neutral700" : t ? "primary600" : "neutral600", children: h }) }), r(z, { ...m, onChange: (k) => {
    p(k.currentTarget.checked), s?.(k);
  }, type: "checkbox", id: o, name: g, "aria-required": f, disabled: e, "aria-disabled": e, "aria-describedby": o ? `${w} ${b}` : void 0, checked: !!t })] });
}, q = c(d)`
  ${$()}
`, C = c(d)`
  /**
    We declare the defined value because we want the height of the input when 
    the values are in a row to be 40px. But defining a height on the label
    would break the input when it wraps.
  */
  padding-top: ${({ size: n }) => `${n === "S" ? "2px" : "6px"}`};
  padding-bottom: ${({ size: n }) => `${n === "S" ? "2px" : "6px"}`};
`, z = c.input`
  height: 100%;
  left: 0;
  opacity: 0;
  position: absolute;
  top: 0;
  z-index: 0;
  width: 100%;
`, V = ({ disabled: n = !1, error: h, hint: e, label: a, name: s, labelAction: l, required: m = !1, id: t, onClear: p, clearLabel: u, checked: o, ...g }) => {
  const f = I(t);
  return r(B, { name: s, hint: e, error: h, id: f, required: m, maxWidth: "320px", children: x(d, { direction: "column", alignItems: "stretch", gap: 1, children: [x(d, { children: [a ? r(W, { action: l, children: a }) : null, u && p && o !== null && !n && r(E, { onClick: p, children: u })] }), r(j, { checked: o, disabled: n, ...g }), r(v, {}), r(R, {})] }) });
}, E = c(F)`
  align-self: flex-end;
  margin-left: auto;
`;
export {
  V as ToggleInput
};
