/**
 * Root node.
 */
export type Root = import('hast').Root
/**
 * Any child.
 */
export type Content = import('hast').Content
/**
 * Element.
 */
export type Element = import('hast').Element
/**
 * Element children.
 */
export type ElementChild = import('hast').ElementContent
/**
 * Element properties.
 */
export type Properties = import('hast').Properties
/**
 * Any known hast node.
 */
export type Node = Root | Content
/**
 * Any known hast parent.
 */
export type Parent = Extract<Node, import('hast').Parent>
/**
 * Any property value.
 */
export type PropertyValue = Properties[keyof Properties]
/**
 * Multiple selectors.
 */
export type Selectors = import('css-selector-parser').Selectors
/**
 * One rule.
 */
export type Rule = import('css-selector-parser').Rule
/**
 * Multiple rules.
 */
export type RuleSet = import('css-selector-parser').RuleSet
/**
 * Pseudo rule.
 */
export type RulePseudo = import('css-selector-parser').RulePseudo
/**
 * Attribute value type.
 */
export type AttrValueType = import('css-selector-parser').AttrValueType
/**
 * Fix for types from `css-selector-parser`.
 */
export type RuleAttr = {
  /**
   *   Attribute name.
   */
  name: string
  /**
   * Operator, such as `'|='`, missing when for example `[x]`.
   */
  operator?: string | undefined
  /**
   * Attribute value type.
   */
  valueType?: AttrValueType | undefined
  /**
   * Attribute value.
   */
  value?: string | undefined
}
/**
 * More specific type for registered selector pseudos.
 */
export type RulePseudoSelector = {
  /**
   *   Name of pseudo, such as `'matches'`.
   */
  name: string
  /**
   *   Set to `'selector'`, because `value` is a compiled selector.
   */
  valueType: 'selector'
  /**
   *   Selector.
   */
  value: Selectors | RuleSet
}
/**
 * Name of namespace.
 */
export type Space = 'html' | 'svg'
/**
 * Direction.
 */
export type Direction = 'auto' | 'ltr' | 'rtl'
/**
 * A schema.
 */
export type Schema = import('property-information').Schema
/**
 * Info on a property.
 */
export type Info = import('property-information').Info
/**
 * Current state.
 */
export type SelectState = {
  /**
   *   Original root selectors.
   */
  rootQuery: Selectors
  /**
   *   Matches.
   */
  results: Array<Element>
  /**
   *   Elements in scope.
   */
  scopeElements: Array<Element>
  /**
   *   Whether we can stop looking after we found one element.
   */
  one: boolean
  /**
   *   Whether we only allow selectors without nesting.
   */
  shallow: boolean
  /**
   *   Whether we found at least one match.
   */
  found: boolean
  /**
   *   Current schema.
   */
  schema: Schema
  /**
   *   Current language.
   */
  language: string | undefined
  /**
   *   Current direction.
   */
  direction: Direction
  /**
   *   Whether we’re in `contentEditable`.
   */
  editableOrEditingHost: boolean
  /**
   *   Track siblings: this current element has `n` elements with its tag name
   *   before it.
   */
  typeIndex: number | undefined
  /**
   *   Track siblings: this current element has `n` elements before it.
   */
  elementIndex: number | undefined
  /**
   *   Track siblings: there are `n` siblings with this element’s tag name.
   */
  typeCount: number | undefined
  /**
   *   Track siblings: there are `n` siblings.
   */
  elementCount: number | undefined
}
