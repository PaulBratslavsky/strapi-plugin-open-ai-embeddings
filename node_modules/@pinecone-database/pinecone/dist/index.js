"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.utils = exports.PineconeClient = void 0;
var pinecone_generated_ts_fetch_1 = require("./pinecone-generated-ts-fetch");
require("cross-fetch/polyfill");
var PineconeError = /** @class */ (function (_super) {
    __extends(PineconeError, _super);
    function PineconeError(message) {
        var _newTarget = this.constructor;
        var _this = _super.call(this, message) || this;
        _this.name = 'PineconeError';
        Object.setPrototypeOf(_this, _newTarget.prototype);
        _this.stack = '';
        return _this;
    }
    return PineconeError;
}(Error));
function streamToArrayBuffer(stream) {
    return __awaiter(this, void 0, void 0, function () {
        var result, reader, _a, done, value, newResult;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    result = new Uint8Array(0);
                    reader = stream.getReader();
                    _b.label = 1;
                case 1:
                    if (!true) return [3 /*break*/, 3];
                    return [4 /*yield*/, reader.read()];
                case 2:
                    _a = _b.sent(), done = _a.done, value = _a.value;
                    if (done) {
                        return [3 /*break*/, 3];
                    }
                    newResult = new Uint8Array(result.length + value.length);
                    newResult.set(result);
                    newResult.set(value, result.length);
                    result = newResult;
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/, result];
            }
        });
    });
}
function handler(func, args) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var e_1, error, body, buffer, _b, text, json;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    _c.trys.push([0, 2, , 7]);
                    return [4 /*yield*/, func(args)];
                case 1: return [2 /*return*/, _c.sent()];
                case 2:
                    e_1 = _c.sent();
                    error = e_1;
                    if (!(error && error.response)) return [3 /*break*/, 5];
                    body = (_a = error.response) === null || _a === void 0 ? void 0 : _a.body;
                    _b = body;
                    if (!_b) return [3 /*break*/, 4];
                    return [4 /*yield*/, streamToArrayBuffer(body)];
                case 3:
                    _b = (_c.sent());
                    _c.label = 4;
                case 4:
                    buffer = _b;
                    text = buffer && new TextDecoder().decode(buffer);
                    try {
                        json = text && JSON.parse(text);
                        return [2 /*return*/, Promise.reject(new PineconeError("".concat(json === null || json === void 0 ? void 0 : json.message)))];
                    }
                    catch (e) {
                        return [2 /*return*/, Promise.reject(new PineconeError("PineconeClient: Error calling ".concat(func.name.replace("bound ", ""), ": ").concat(text)))];
                    }
                    return [3 /*break*/, 6];
                case 5: return [2 /*return*/, Promise.reject(new PineconeError("PineconeClient: Error calling ".concat(func.name.replace("bound ", ""), ": ").concat(error)))];
                case 6: return [3 /*break*/, 7];
                case 7: return [2 /*return*/];
            }
        });
    });
}
function exposeMethods(instance, target) {
    var _this = this;
    var _loop_1 = function (prop) {
        var descriptor = instance[prop];
        if (descriptor && typeof descriptor === 'function' && prop !== 'constructor') {
            // @ts-ignore
            target[prop] = function (args) { return __awaiter(_this, void 0, void 0, function () {
                var boundFunction;
                return __generator(this, function (_a) {
                    Object.defineProperty(descriptor, 'name', { value: prop });
                    boundFunction = descriptor.bind(instance);
                    return [2 /*return*/, handler(boundFunction, args)];
                });
            }); };
        }
    };
    for (var _i = 0, _a = Object.keys(Object.getPrototypeOf(instance)); _i < _a.length; _i++) {
        var prop = _a[_i];
        _loop_1(prop);
    }
}
function attachHandler(instance) {
    var _this = this;
    var _loop_2 = function (prop) {
        var descriptor = instance[prop];
        if (descriptor && typeof descriptor === 'function' && prop !== 'constructor') {
            // @ts-ignore
            instance[prop] = function (args) { return __awaiter(_this, void 0, void 0, function () {
                var boundFunction;
                return __generator(this, function (_a) {
                    Object.defineProperty(descriptor, 'name', { value: prop });
                    boundFunction = descriptor.bind(instance);
                    return [2 /*return*/, handler(boundFunction, args)];
                });
            }); };
        }
    };
    for (var _i = 0, _a = Object.keys(Object.getPrototypeOf(instance)); _i < _a.length; _i++) {
        var prop = _a[_i];
        _loop_2(prop);
    }
    return instance;
}
var PineconeClient = /** @class */ (function () {
    function PineconeClient() {
        this.apiKey = null;
        this.projectName = null;
        this.environment = null;
    }
    PineconeClient.prototype.getProjectName = function (controllerPath, apiKey) {
        return __awaiter(this, void 0, void 0, function () {
            var whoami, request, response, error, statusText, project_name, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        whoami = "".concat(controllerPath, "/actions/whoami");
                        request = {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json',
                                'Api-Key': apiKey
                            }
                        };
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 7, , 8]);
                        return [4 /*yield*/, fetch(whoami, request)];
                    case 2:
                        response = _a.sent();
                        if (!(response.status !== 200)) return [3 /*break*/, 4];
                        return [4 /*yield*/, response.text()];
                    case 3:
                        error = _a.sent();
                        statusText = response.statusText;
                        throw new Error("".concat(statusText, " - ").concat(error));
                    case 4: return [4 /*yield*/, response.json()];
                    case 5:
                        project_name = (_a.sent()).project_name;
                        return [2 /*return*/, project_name];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        error_1 = _a.sent();
                        throw new PineconeError("Failed getting project name. ".concat(error_1));
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    PineconeClient.prototype.init = function (configuration) {
        return __awaiter(this, void 0, void 0, function () {
            var environment, apiKey, controllerPath, _a, error_2, controllerConfigurationParameters, controllerConfiguration, indexOperations;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        environment = configuration.environment, apiKey = configuration.apiKey;
                        this.apiKey = apiKey;
                        this.environment = environment;
                        controllerPath = "https://controller.".concat(environment, ".pinecone.io");
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        _a = this;
                        return [4 /*yield*/, this.getProjectName(controllerPath, apiKey)];
                    case 2:
                        _a.projectName = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _b.sent();
                        throw error_2;
                    case 4:
                        controllerConfigurationParameters = {
                            basePath: controllerPath,
                            apiKey: apiKey
                        };
                        controllerConfiguration = new pinecone_generated_ts_fetch_1.Configuration(controllerConfigurationParameters);
                        indexOperations = new pinecone_generated_ts_fetch_1.IndexOperationsApi(controllerConfiguration);
                        exposeMethods(indexOperations, this);
                        return [2 /*return*/];
                }
            });
        });
    };
    PineconeClient.prototype.Index = function (index) {
        if (!this.apiKey)
            throw new Error('PineconeClient: API key not set. Call init() first.');
        if (!this.projectName)
            throw new Error('PineconeClient: Project name not set. Call init() first.');
        if (!this.environment)
            throw new Error('PineconeClient: Environment not set. Call init() first.');
        var indexConfigurationParameters = {
            basePath: "https://".concat(index, "-").concat(this.projectName, ".svc.").concat(this.environment, ".pinecone.io"),
            apiKey: this.apiKey
        };
        var indexConfiguration = new pinecone_generated_ts_fetch_1.Configuration(indexConfigurationParameters);
        var vectorOperations = new pinecone_generated_ts_fetch_1.VectorOperationsApi(indexConfiguration);
        return attachHandler(vectorOperations);
    };
    return PineconeClient;
}());
exports.PineconeClient = PineconeClient;
var utils_1 = require("./utils");
Object.defineProperty(exports, "utils", { enumerable: true, get: function () { return utils_1.utils; } });
//# sourceMappingURL=index.js.map